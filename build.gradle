// JLayer build.gradle
// See : http://www.javazoom.net/index.shtml

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = "javazoom.jl.player.MP3"
sourceCompatibility = 1.5
version = '1.0.2'
description = 'FreeMP3 (JLayer Open Source) MP3 Player for Java/Groovy'
defaultTasks 'clean','build', 'javadoc', 'installApp', 'makejar', 'distZip', 'distTar', 'runMP3'
ext{
    archivesBaseName='FreeMP3'
}

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'org.apache.ivy:ivy:2.3.0'
    testCompile fileTree(dir: 'lib',  includes: ['*.jar']) 
    testRuntime fileTree(dir: 'lib',  includes: ['*.jar']) 
    testCompile 'junit:junit:4.11'
}
 
sourceSets {
  main {
    resources {
      srcDir "resources"
    }

    groovy {
      exclude 'some/unwanted/package/**'
    } // end of groovy

    java {
      exclude 'some/unwanted/package/**'
    } // end of java
  } // end of main

  test {
    resources {
      srcDir "resources"
    }
  } // end of test
} // end of sourceSets


jar { 	
    manifest { 
        attributes 'Implementation-Title': 'FreeMP3', 'Implementation-Version': version, 'Main-Class': 'javazoom.jl.player.MP3'
    }
}

task(runMP3, dependsOn: 'classes', type: JavaExec) {
	main = 'javazoom.jl.player.MP3'
	classpath sourceSets.main.runtimeClasspath 
	classpath 'resources/sfd.ser'
	args 'resources/Love.mp3'
	systemProperty 'simple.message', 'Hello '
}

task(runRMD, dependsOn: 'classes', type: JavaExec) {
	main = 'javazoom.jl.player.ReadMetaData'
	classpath sourceSets.main.runtimeClasspath 
	args 'resources/Love.mp3'
}


task makejar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
    manifest {
        attributes 'Main-Class': 'javazoom.jl.player.MP3', archivesBaseName:'FreeMP3'
    }
}

tasks.withType(Compile) {
  options.fork = true
  options.forkOptions.with {
    memoryMaximumSize = "384m" // try different values
  }
}

test {
    jvmArgs ["-Xmx256M"]
    //include "**/tests/special/**/*Test.class" // Disables Auto Detection of which tests to run
    //exclude "**/Old*Test.class"
    forkEvery = 30
    maxParallelForks = guessMaxForks()
}

def guessMaxForks() {
    int processors =
    Runtime.runtime.availableProcessors()
    return Math.max(2, (int) (processors / 2))
}

// ================================
task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}
